Sena Sinan Report For Project 3

In Task 1, I implemented the draw method for the SceneNode class to ensure that transformations applied to a parent node propagate correctly to its children in the scene graph. To achieve this, I utilized the getTransformationMatrix method from the TRS class, which combines translation, rotation, and scaling into a single transformation matrix. During the draw method, this matrix is applied to the provided model, view, and projection matrices using matrix multiplication, updating them to reflect the current node's transformations. The meshDrawer for the current node is then drawn using these transformed matrices. Finally, I implemented a recursive call to the draw method for each child node, passing down the updated matrices to propagate the hierarchical transformations throughout the scene graph. This ensures a proper rendering hierarchy, allowing transformations of parent nodes (like translation or rotation) to seamlessly affect their children.

In Task 2, I updated the fragment shader (meshFS) to implement diffuse and specular lighting using the Phong lighting model. The diffuse component simulates light scattering across the surface and was calculated as the dot product between the normalized surface normal and the light direction, clamped to zero to ensure no negative light contribution. For the specular component, which represents shiny reflections, I used the reflection of the light direction around the surface normal and computed the dot product with the view direction, raising it to the power of a shininess factor (Phong exponent) for sharper highlights. These components, along with a constant ambient lighting value, were combined to determine the final color of each fragment. This implementation added realism to the scene by allowing objects to exhibit smooth shading and reflective highlights when illuminated by a light source.



In Task 3, I added Mars as a new node to the solar system scene graph. Using the same sphere mesh object as the Sun, Earth, and Moon, I applied the provided Mars texture. Mars was set as a child node of the Sun, inheriting its transformations, and was translated by -6 units along the X-axis to position it relative to the Sun. Additionally, I scaled Mars to 0.35 along all axes to reflect its smaller size compared to other celestial objects. To simulate its rotation, I implemented a rotation along the Z-axis at 1.5 times the Sun's rotation speed. This was achieved by modifying the renderLoop to dynamically update Mars's transformation each frame.